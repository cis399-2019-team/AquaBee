Project Idea: Murder Mystery Night Distribution (MMN) 
-------------------------------------------------------

General Description: In a previous class we developed a C++ terminal game that allows users to explore a house where a murder took place. The goal is to figure out who the murderer is before you become the next victim. The main purpose of this project will be to implement an update system that pushes updates to the git version control system. The main goal of this is to create a method of posting updates to the game code that will instantly be accessible by all users. Each user will have their own progress in the campaign saved and edit basic character information. These changes will persist through updates, unless serious changes are made. 

Goals: The main goal for the project is to implement an environment in which the user can have access to MMN and be able to effectively and reliably use this fun passtime. 
	-Sub Goal: implement a memory system that keeps track of where a user left off
	-Sub Goal: implement an architecture that allows for updates without erasing personal data
	-Sub Goal: We will test to make sure that people can login and run their games
	-Sub Goal: We will test that user data persists and continues after an update to game code

User Support:
	- We will have an email set up in user documentation that allows people to email us if there are any requests or features anyone wants to be added to the game
	- The user experience will be pretty straightforward, they run the program, set up their character and begin playing the game
	- We will have in game help instructions to help the user get around the game
	- Current users shouldn't really need any additional communication with sysadmins

Security:
	- We will use all user accounts' ssh keys to allow them to authenticate into only their user account
	- Luckily we don't need to open up user accounts outside of this
	- We will use a cron job to pull the github repo periodically using git pull which is a secure interation
	- We will also use Puppet in order to push the game code to all the users so there is no added risk of opening up the accounts or the instance to the world
	- AWS handles a lot of the security risks by making sure no traffic outside of the security group ever reaches the instance

Implementation:
	- Puppet and cron jobs will be used to implement all the the periodic updates
	- To maintain the the environment we will be keeping an eye on emails for current users as well as new users

Documentation:
	- We will create user documentation that will be visible and accessible in both the virtual envirionment user account as well as on the Aquabee Github
	- We will create system admin documentation that will be visible and accessible on the Aquabee Github for future system administrators that may pick up this project or add on to it
	- As stated previously, there are also tutorials/help in the game itself. It is meant to be a trial and error game. But there is some help.